apiVersion: aws.upbound.io/v1beta1
kind: ProviderConfig
metadata:
  #
  # In order to authenticate with the AWS API, the provider controllers need to have access to credentials. It could be an IAM User or an IAM Role 
  # Note that every Crossplane managed resource has a 'providerConfig' field which allows us to specify a separate ProviderConfig per Managed Resource.
  # This allows us to use IAM credentials that are limited in scope to perform the operations related to only that managed resource.
  # If 'providerConfigRef' is not specified for a Managed Resource, Crossplane will attempt to use a ProviderConfig named 'default'
  #
  name: default
spec:
  credentials:
    source: InjectedIdentity
    #
    # Following configuration is used when credentials of an IAM user are provided through a Secret
    #
    # source: Secret
    # secretRef:
    #   namespace: crossplane-system
    #   name: aws-credentials
    #   key: credentials



#
# Previously, the AWS credentials of an IAM user were made available to the Crossplane AWS Provider using a Kubernetes Secret
# The IAM user was then assuming an IAM role to create provider-specific Crossplane resources.
# The Kubernetes Secret itself was unpacked from a SealedSecrets resource and hence required the deployment of SealedSecrets Controller
# This is no longer needed after making the Crossplane AWS Provider run under IRSA.
#
# ---
# apiVersion: aws.crossplane.io/v1beta1
# kind: ProviderConfig
# metadata:
#   name: default
# spec:
#   assumeRoleARN: "arn:aws:iam::966549209321:role/EKS-Admin-Role"
#   credentials:
#     source: Secret
#     secretRef:
#       namespace: crossplane-system
#       name: aws-credentials
#       key: credentials
