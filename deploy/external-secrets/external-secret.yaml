#
# SecretStore points to AWS Secrets Manager in a certain account within a defined region
# This is the cloud provider specific component of the data model employed by External Secrets Operator.
# It refereces a Kubernetes ServiceAccount which is associated with an IAM Role
# The IAM Role provides the authentication credentials and permissions required to access secrets stored in AWS Secrets Manager
#
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: sealed-secrets
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        jwt:
          #
          # Reference to a Kubernetes ServiceAccont associated with an IAM Role 
          # 
          serviceAccountRef:
            name: external-secrets
            
#
# ExternalSecret is the cloud provider agnostic component of the data model employed by External Secrets Operator.
# It references a SecretStore resource that specifies how to access the data from the provider-specific component 
# It defines a blueprint for creating a Kubernetes Secret from data retrieved from provider-specific component
# It declares what data to fetch from the external secret provider using a 'spec.data' section  
# You can specify how the Kubernetes Secret should look like by specifying a 'spec.target.template' section
#
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sealed-secrets
  namespace: sealed-secrets
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    #
    # The ESO controller uses the spec.target.template section of an ExternalSecret as the blueprint for creating a corresponding Kubernetes Secret
    # There advanced templating capabilities that can be used to transform the data retrieved from the external secret provider before it is stored as a Kubernetes Secret
    # Here, we specify that it should create a Kubernetes Secret named 'sarathy-sealing-keys' with 'type' set to 'kubernetes.io/tls'
    # It is also specified that the Kubernetes Secret should have the label 'sealedsecrets.bitnami.com/sealed-secrets-key: active' in its metadata
    # 
    name: sarathy-sealing-keys
    creationPolicy: Owner
    template:
      type: kubernetes.io/tls
      metadata:
        labels:
          sealedsecrets.bitnami.com/sealed-secrets-key: active
  data:
    #
    # Retrieve the data stored with the following two keys
    # 1. sealed-secrets-sealing-crt
    # 2. sealed-secrets-sealing-key
    #
  - secretKey: tls.crt
    remoteRef:
      key: sealed-secrets-sealing-crt	
  - secretKey: tls.key
    remoteRef:
      key: sealed-secrets-sealing-key	
